import{_ as s,c as a,d as e,o as t}from"./app-Cga9qcZH.js";const p={};function o(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="using-inspireface-in-c" tabindex="-1"><a class="header-anchor" href="#using-inspireface-in-c"><span>Using InspireFace in C++</span></a></h1><p>We provide C++ header files as interfaces, and the C++ API provides faster and easier interface operations than CAPI.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>In the case of <strong>InspireFace&gt;=1.2.1</strong>, the C++ API was only available in the release precompile library.</p></div><h2 id="installation-and-setup" tabindex="-1"><a class="header-anchor" href="#installation-and-setup"><span>Installation and Setup</span></a></h2><p>You can download the precompiled inspireface library from the <a href="https://github.com/HyperInspire/InspireFace/releases" target="_blank" rel="noopener noreferrer">release page</a>, which includes the dynamic library +CAPI header by default. You need to link and include them in your project, using cmake as an example:</p><div class="language-cmake line-numbers-mode" data-highlighter="prismjs" data-ext="cmake"><pre><code><span class="line"><span class="token comment"># Prepare your inspireface-sdk directory in advance</span></span>
<span class="line"><span class="token keyword">set</span><span class="token punctuation">(</span>INSPIREFACE_DIR your_dir/InspireFace<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>INSPIREFACE_DIR<span class="token punctuation">}</span>/include<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>INSPIREFACE_DIR<span class="token punctuation">}</span>/lib<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Link to your project</span></span>
<span class="line"><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>YourProject InspireFace<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h2><p>Global initialization of InspireFace is necessary. You only need to perform it once when the program starts. The initialization includes functions such as configuration reading and model loading.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inspireface/inspireface.hpp&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Global initialization is call only once</span></span>
<span class="line">INSPIREFACE_CONTEXT<span class="token operator">-&gt;</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;test_res/pack/Pikachu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="face-algorithm-session" tabindex="-1"><a class="header-anchor" href="#face-algorithm-session"><span>Face Algorithm Session</span></a></h2><p>InspireFace&#39;s facial analysis algorithms are all concentrated in the session. You can use the session instance to perform <strong>face recognition</strong>, <strong>face embedding extraction</strong>, <strong>face detection</strong>, <strong>face tracking</strong>, <strong>landmark localization</strong>, <strong>liveness detection</strong>, <strong>head pose estimation</strong>, <strong>attribute recognition</strong>, and other functions.</p><p>Since the session contains some cache, <strong>we recommend</strong> using one session within a thread, and <strong>we don&#39;t recommend</strong> cross-using internal data from multiple sessions in tracking mode, as this can easily cause confusion. Sessions can be freely created and destroyed anywhere.</p><h3 id="create-session" tabindex="-1"><a class="header-anchor" href="#create-session"><span>Create Session</span></a></h3><p>When creating a session, there are some important parameters that need to be specified:</p><ul><li><strong>Option</strong>: Features that need to be turned on, such as face recognition, mask detection, face attributes. This step will increase the memory used by the session</li><li><strong>Detect Mode</strong>: <ul><li><strong>Always Detection</strong>: Face detection is performed each time, usually for image input or scenes where faces do not need to be tracked</li><li><strong>Light Tracking</strong>: Lightweight face tracking algorithm, support input frame sequence tracking face, tracking speed is extremely fast</li><li><strong>Tracking by Detection</strong>: With detector-dependent tracking, detection is performed every frame, with low speed and high precision</li></ul></li><li><strong>Max Faces</strong>: Limit the maximum number of faces to detect, if the number of faces is too large, the algorithm will be slow</li><li><strong>Detect Pixel Level</strong>: Face detector level, the higher the more accurate, but also affect the execution speed, usually 160, 192, 256, 320, 640</li></ul><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When creating a session, it will use device memory, and as more options are enabled, the memory usage increases. Appropriately disabling some unnecessary features can save memory.</p></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// Turn on some features</span></span>
<span class="line">inspire<span class="token double-colon punctuation">::</span>CustomPipelineParameter param<span class="token punctuation">;</span></span>
<span class="line">param<span class="token punctuation">.</span>enable_recognition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">param<span class="token punctuation">.</span>enable_liveness <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">param<span class="token punctuation">.</span>enable_mask_detect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">param<span class="token punctuation">.</span>enable_face_attribute <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">param<span class="token punctuation">.</span>enable_face_quality <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a session</span></span>
<span class="line">inspire<span class="token double-colon punctuation">::</span>Session session <span class="token operator">=</span> inspire<span class="token double-colon punctuation">::</span><span class="token class-name">Session</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span></span>
<span class="line">    inspire<span class="token double-colon punctuation">::</span>DetectModuleMode<span class="token double-colon punctuation">::</span>DETECT_MODE_ALWAYS_DETECT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// or </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Creates a pointer to a session</span></span>
<span class="line">std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>inspire<span class="token double-colon punctuation">::</span>Session<span class="token operator">&gt;</span> <span class="token function">session</span><span class="token punctuation">(</span>inspire<span class="token double-colon punctuation">::</span><span class="token class-name">Session</span><span class="token double-colon punctuation">::</span><span class="token function">CreatePtr</span><span class="token punctuation">(</span></span>
<span class="line">    inspire<span class="token double-colon punctuation">::</span>DetectModuleMode<span class="token double-colon punctuation">::</span>DETECT_MODE_ALWAYS_DETECT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-detection" tabindex="-1"><a class="header-anchor" href="#face-detection"><span>Face Detection</span></a></h3><p>Face detection is the first step in the analysis of faces, which requires the input of an image or frame:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// Read an image locally as bitmap(BGR888)</span></span>
<span class="line">inspirecv<span class="token double-colon punctuation">::</span>Image image <span class="token operator">=</span> inspirecv<span class="token double-colon punctuation">::</span><span class="token class-name">Image</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Create a FrameProcess for processing image formats and rotating data</span></span>
<span class="line">inspirecv<span class="token double-colon punctuation">::</span>FrameProcess process <span class="token operator">=</span></span>
<span class="line">    inspirecv<span class="token double-colon punctuation">::</span><span class="token class-name">FrameProcess</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inspirecv<span class="token double-colon punctuation">::</span>BGR<span class="token punctuation">,</span> inspirecv<span class="token double-colon punctuation">::</span>ROTATION_0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create an object to store the result</span></span>
<span class="line">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>inspire<span class="token double-colon punctuation">::</span>FaceTrackWrap<span class="token operator">&gt;</span> results<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int32_t</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Execute face detection algorithm</span></span>
<span class="line">ret <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">FaceDetectAndTrack</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;FaceDetectAndTrack failed&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;result: &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>trackId <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;quality: &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>quality<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>quality<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>quality<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>quality<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span></span>
<span class="line">                <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>quality<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span>
<span class="line">    inspirecv<span class="token double-colon punctuation">::</span>Rect2i rect <span class="token operator">=</span> inspirecv<span class="token double-colon punctuation">::</span><span class="token class-name">Rect2i</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x<span class="token punctuation">,</span> result<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y<span class="token punctuation">,</span> result<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> result<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    image<span class="token punctuation">.</span><span class="token function">DrawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> inspirecv<span class="token double-colon punctuation">::</span>Color<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Plot result</span></span>
<span class="line">image<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;result.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-landmark" tabindex="-1"><a class="header-anchor" href="#face-landmark"><span>Face Landmark</span></a></h3><p>Face landmark prediction can be used in any detection mode state, but it should be noted that if the detection mode is in <strong>TRACK</strong> state, you will get smoother facial landmark points. This is because the internal face tracking state landmark optimization filtering has been integrated. We provide two solutions: 5 basic key points and denser key points (more than 100 points).</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">inspire<span class="token operator">::</span>FaceTrackWrap result <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>inspirecv<span class="token operator">::</span>Point2f<span class="token operator">&gt;</span> landmark <span class="token operator">=</span> session<span class="token operator">-&gt;</span><span class="token function">GetFaceDenseLandmark</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-embeding" tabindex="-1"><a class="header-anchor" href="#face-embeding"><span>Face Embeding</span></a></h3><p>Get face Embeding is an important step in face recognition, comparison or face swap, which usually needs to be carried out after face detection or tracking:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// Get face embedding</span></span>
<span class="line">inspire<span class="token double-colon punctuation">::</span>FaceEmbedding feature<span class="token punctuation">;</span></span>
<span class="line">session<span class="token punctuation">.</span><span class="token function">FaceFeatureExtract</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feature<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-pose-estimation" tabindex="-1"><a class="header-anchor" href="#face-pose-estimation"><span>Face Pose Estimation</span></a></h3><p>When you create a session with the <strong>enable_face_pose</strong> option enabled, you can obtain face pose Euler angle values from the returned MultipleFaceData during face detection or tracking:</p><ul><li><strong>HFFaceEulerAngle</strong>: <ul><li><strong>roll</strong>: Head rotation around the Z-axis (tilting left/right)</li><li><strong>yaw</strong>: Head rotation around the Y-axis (turning left/right)</li><li><strong>pitch</strong>: Head rotation around the X-axis (nodding up/down)</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;yaw: &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>face3DAngle<span class="token punctuation">.</span>yaw <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, pitch: &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>face3DAngle<span class="token punctuation">.</span>pitch <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, roll: &quot;</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span>face3DAngle<span class="token punctuation">.</span>roll <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="face-comparison" tabindex="-1"><a class="header-anchor" href="#face-comparison"><span>Face Comparison</span></a></h3><p>Face comparison is the process of comparing two faces to determine if they are the same person.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// Get face embedding</span></span>
<span class="line"><span class="token keyword">float</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0f</span><span class="token punctuation">;</span></span>
<span class="line">INSPIREFACE_FEATURE_HUB<span class="token operator">-&gt;</span><span class="token function">CosineSimilarity</span><span class="token punctuation">(</span>feature1<span class="token punctuation">.</span>data<span class="token punctuation">,</span> feature2<span class="token punctuation">.</span>data<span class="token punctuation">,</span> feature1<span class="token punctuation">.</span>size<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="more" tabindex="-1"><a class="header-anchor" href="#more"><span>More</span></a></h2><p>TODO</p>`,35)]))}const l=s(p,[["render",o]]),r=JSON.parse('{"path":"/using-with/cpp.html","title":"Using InspireFace in C++","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation and Setup","slug":"installation-and-setup","link":"#installation-and-setup","children":[]},{"level":2,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":2,"title":"Face Algorithm Session","slug":"face-algorithm-session","link":"#face-algorithm-session","children":[{"level":3,"title":"Create Session","slug":"create-session","link":"#create-session","children":[]},{"level":3,"title":"Face Detection","slug":"face-detection","link":"#face-detection","children":[]},{"level":3,"title":"Face Landmark","slug":"face-landmark","link":"#face-landmark","children":[]},{"level":3,"title":"Face Embeding","slug":"face-embeding","link":"#face-embeding","children":[]},{"level":3,"title":"Face Pose Estimation","slug":"face-pose-estimation","link":"#face-pose-estimation","children":[]},{"level":3,"title":"Face Comparison","slug":"face-comparison","link":"#face-comparison","children":[]}]},{"level":2,"title":"More","slug":"more","link":"#more","children":[]}],"git":{"updatedTime":1750908879000,"contributors":[{"name":"tunm","username":"tunm","email":"tunmxy@163.com","commits":4,"url":"https://github.com/tunm"},{"name":"Jingyu","username":"Jingyu","email":"tunmxy@163.com","commits":1,"url":"https://github.com/Jingyu"}],"changelog":[{"hash":"d823a5a8f6b82dcf3ced9f8cf2d64180be4a0b5d","time":1750908879000,"email":"tunmxy@163.com","author":"tunm","message":"1"},{"hash":"7cecca5fb639f6cdc982858f83a0ae62efcb32e2","time":1744203234000,"email":"tunmxy@163.com","author":"Jingyu","message":"Update"},{"hash":"c512377e2076e7ec1b60344de14cb1fc52fd29a9","time":1744191774000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"36283da830e3e7efee25add2666d4a49dae22fa8","time":1744178190000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"b1bdfb0435ebc29849c32dd85a92e67161a23726","time":1744160796000,"email":"tunmxy@163.com","author":"tunm","message":"Update"}]},"filePathRelative":"using-with/cpp.md"}');export{l as comp,r as data};
