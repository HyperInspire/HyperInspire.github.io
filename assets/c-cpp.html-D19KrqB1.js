import{_ as s,c as a,d as e,o as t}from"./app-iW9uYfmL.js";const p={};function c(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="using-inspireface-in-c-c" tabindex="-1"><a class="header-anchor" href="#using-inspireface-in-c-c"><span>Using InspireFace in C/C++</span></a></h1><p>Whether it is C or C++, we recommend the use of a single CAPI header file + lib, because CAPI long-term maintenance is relatively stable, of course, there are C++ interfaces, specific reference to C++ header files.</p><h2 id="installation-and-setup" tabindex="-1"><a class="header-anchor" href="#installation-and-setup"><span>Installation and Setup</span></a></h2><p>You can download the precompiled inspireface library from the <a href="https://github.com/HyperInspire/InspireFace/releases" target="_blank" rel="noopener noreferrer">release page</a>, which includes the dynamic library +CAPI header by default. You need to link and include them in your project, using cmake as an example:</p><div class="language-cmake line-numbers-mode" data-highlighter="prismjs" data-ext="cmake"><pre><code><span class="line"><span class="token comment"># Prepare your inspireface-sdk directory in advance</span></span>
<span class="line"><span class="token keyword">set</span><span class="token punctuation">(</span>INSPIREFACE_DIR your_dir/InspireFace<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>INSPIREFACE_DIR<span class="token punctuation">}</span>/include<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>INSPIREFACE_DIR<span class="token punctuation">}</span>/lib<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Link to your project</span></span>
<span class="line"><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>YourProject InspireFace<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h2><p>Global initialization of InspireFace is necessary. You only need to perform it once when the program starts. The initialization includes functions such as configuration reading and model loading.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Import header file</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inspireface.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Initialization at the beginning of the program</span></span>
<span class="line">std<span class="token operator">::</span>string resourcePath <span class="token operator">=</span> <span class="token string">&quot;test_res/pack/Pikachu&quot;</span><span class="token punctuation">;</span></span>
<span class="line">HResult ret <span class="token operator">=</span> <span class="token function">HFReloadInspireFace</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Failed to launch InspireFace: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When you don&#39;t need it (you can ignore it)</span></span>
<span class="line"><span class="token function">HFTerminateInspireFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="face-algorithm-session" tabindex="-1"><a class="header-anchor" href="#face-algorithm-session"><span>Face Algorithm Session</span></a></h2><p>InspireFace&#39;s facial analysis algorithms are all concentrated in the session. You can use the session instance to perform <strong>face recognition</strong>, <strong>face embedding extraction</strong>, <strong>face detection</strong>, <strong>face tracking</strong>, <strong>landmark localization</strong>, <strong>liveness detection</strong>, <strong>head pose estimation</strong>, <strong>attribute recognition</strong>, and other functions.</p><p>Since the session contains some cache, <strong>we recommend</strong> using one session within a thread, and <strong>we don&#39;t recommend</strong> cross-using internal data from multiple sessions in tracking mode, as this can easily cause confusion. Sessions can be freely created and destroyed anywhere.</p><h3 id="create-session" tabindex="-1"><a class="header-anchor" href="#create-session"><span>Create Session</span></a></h3><p>When creating a session, there are some important parameters that need to be specified:</p><ul><li><strong>Option</strong>: Features that need to be turned on, such as face recognition, mask detection, face attributes. This step will increase the memory used by the session</li><li><strong>Detect Mode</strong>: <ul><li><strong>Always Detection</strong>: Face detection is performed each time, usually for image input or scenes where faces do not need to be tracked</li><li><strong>Light Tracking</strong>: Lightweight face tracking algorithm, support input frame sequence tracking face, tracking speed is extremely fast</li><li><strong>Tracking by Detection</strong>: With detector-dependent tracking, detection is performed every frame, with low speed and high precision</li></ul></li><li><strong>Max Faces</strong>: Limit the maximum number of faces to detect, if the number of faces is too large, the algorithm will be slow</li><li><strong>Detect Pixel Level</strong>: Face detector level, the higher the more accurate, but also affect the execution speed, usually 160, 192, 256, 320, 640</li></ul><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When creating a session, it will use device memory, and as more options are enabled, the memory usage increases. Appropriately disabling some unnecessary features can save memory.</p></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Enable the functions: face recognition, mask detection, live detection, and face quality</span></span>
<span class="line"><span class="token comment">// detection</span></span>
<span class="line">HOption option <span class="token operator">=</span> HF_ENABLE_FACE_RECOGNITION <span class="token operator">|</span> HF_ENABLE_QUALITY <span class="token operator">|</span> HF_ENABLE_MASK_DETECT <span class="token operator">|</span> HF_ENABLE_LIVENESS <span class="token operator">|</span> HF_ENABLE_DETECT_MODE_LANDMARK<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Non-video or frame sequence mode uses IMAGE-MODE, which is always face detection without</span></span>
<span class="line"><span class="token comment">// tracking</span></span>
<span class="line">HFDetectMode detMode <span class="token operator">=</span> HF_DETECT_MODE_ALWAYS_DETECT<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Maximum number of faces detected</span></span>
<span class="line">HInt32 maxDetectNum <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Face detection image input level</span></span>
<span class="line">HInt32 detectPixelLevel <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Handle of the current face SDK algorithm context</span></span>
<span class="line">HFSession session <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateInspireFaceSessionOptional</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> detMode<span class="token punctuation">,</span> maxDetectNum<span class="token punctuation">,</span> detectPixelLevel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create FaceContext error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️Note: When you do not need to use the session, it is <strong>important</strong> to destroy it, otherwise it will cause memory leaks:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// The memory must be freed at the end of the program</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseInspireFaceSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-detection" tabindex="-1"><a class="header-anchor" href="#face-detection"><span>Face Detection</span></a></h3><p>Face detection is the first step in the analysis of faces, which requires the input of an image or frame:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Load a image</span></span>
<span class="line">HFImageBitmap image<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateImageBitmapFromFilePath</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;The source entered is not a picture or read error.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Prepare an image parameter structure for configuration</span></span>
<span class="line">HFImageStream imageHandle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateImageStreamFromImageBitmap</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> HF_CAMERA_ROTATION_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>imageHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create ImageStream error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Execute HF_FaceContextRunFaceTrack captures face information in an image</span></span>
<span class="line">HFMultipleFaceData multipleFaceData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> imageHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Execute HFExecuteFaceTrack error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Print the number of faces detected</span></span>
<span class="line"><span class="token keyword">auto</span> faceNum <span class="token operator">=</span> multipleFaceData<span class="token punctuation">.</span>detectedNum<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Num of face: %d&quot;</span><span class="token punctuation">,</span> faceNum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Copy a new image to draw</span></span>
<span class="line">HFImageBitmap drawImage <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFImageBitmapCopy</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token operator">&amp;</span>drawImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Copy ImageBitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">HFImageBitmapData data<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFImageBitmapGetData</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get ImageBitmap data error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> faceNum<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFImageBitmapDrawRect</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>rects<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Print FaceID, In IMAGE-MODE it is changing, in VIDEO-MODE it is fixed, but it may be lost</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;FaceID: %d&quot;</span><span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>trackIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Print Head euler angle, It can often be used to judge the quality of a face by the Angle</span></span>
<span class="line">    <span class="token comment">// of the head</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Roll: %f, Yaw: %f, Pitch: %f&quot;</span><span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>roll<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>yaw<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>pitch<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">HFImageBitmapWriteToFile</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">,</span> <span class="token string">&quot;draw_detected.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_WARN<span class="token punctuation">,</span> <span class="token string">&quot;Write to file success: %s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;draw_detected.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>imageHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release image stream error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// The memory must be freed at the end of the program</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseInspireFaceSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release image bitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release draw image bitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-embeding" tabindex="-1"><a class="header-anchor" href="#face-embeding"><span>Face Embeding</span></a></h3><p>Get face Embeding is an important step in face recognition, comparison or face swap, which usually needs to be carried out after face detection or tracking:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Execute face tracking on the image</span></span>
<span class="line">HFMultipleFaceData multipleFaceData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Track faces in the image</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Run face track error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>multipleFaceData<span class="token punctuation">.</span>detectedNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Check if any faces were detected</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;No face was detected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Extract facial features from the first detected face, an interface that uses copy features in a comparison scenario</span></span>
<span class="line">HFFaceFeature feature<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create face feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Not in use need to release</span></span>
<span class="line"><span class="token function">HFReleaseFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="face-embedding-database" tabindex="-1"><a class="header-anchor" href="#face-embedding-database"><span>Face Embedding Database</span></a></h2><p>We provide a lightweight face embedding vector database (<strong>FeatureHub</strong>) storage solution that includes basic functions such as adding, deleting, modifying, and searching, while supporting both <strong>memory</strong> and <strong>persistent</strong> storage modes.</p><p>Before starting FeatureHub, you need to be familiar with the following parameters:</p><ul><li><strong>primaryKeyMode</strong>: Primary key mode, with two modes available. It&#39;s recommended to use HF_PK_AUTO_INCREMENT by default <ul><li>HF_PK_AUTO_INCREMENT: Auto-increment mode for primary keys</li><li>HF_PK_MANUAL_INPUT: Manual input mode for primary keys, requiring users to avoid duplicate primary keys themselves</li></ul></li><li><strong>enablePersistence</strong>: Whether to enable persistent database storage mode <ul><li>If true: The database will write to local files for persistent storage during usage</li><li>If false: High-speed memory management mode, dependent on program lifecycle</li></ul></li><li><strong>persistenceDbPath</strong>: Storage path required only for persistent mode, defined by the user. If the input is a folder rather than a file, the system default file naming will be used</li><li><strong>searchThreshold</strong>: Face search threshold, using floating-point numbers. During search, only embeddings above the threshold are searched. Different models and scenarios require manual threshold settings</li><li><strong>searchMode</strong>: Search mode, <strong>effective only when searching for top-1 face</strong>, with EAGER and EXHAUSTIVE modes (<strong>this feature is temporarily disabled in the current version</strong>) <ul><li>HF_SEARCH_MODE_EAGER: Complete search immediately upon encountering the first face above the threshold</li><li>HF_SEARCH_MODE_EXHAUSTIVE: Search all similar faces and return the one with the highest similarity</li></ul></li></ul><h3 id="enable-disable-featurehub" tabindex="-1"><a class="header-anchor" href="#enable-disable-featurehub"><span>Enable/Disable FeatureHub</span></a></h3><p>Using thread-safe singleton pattern design, it has global scope and only needs to be opened once:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// When you need to enable global storage</span></span>
<span class="line">HFFeatureHubConfiguration configuration<span class="token punctuation">;</span></span>
<span class="line">configuration<span class="token punctuation">.</span>primaryKeyMode <span class="token operator">=</span> HF_PK_AUTO_INCREMENT<span class="token punctuation">;</span>	<span class="token comment">// Recommended to use auto increment</span></span>
<span class="line">configuration<span class="token punctuation">.</span>enablePersistence <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">// If the memory mode is set to 0</span></span>
<span class="line">configuration<span class="token punctuation">.</span>persistenceDbPath <span class="token operator">=</span> db_path<span class="token punctuation">;</span></span>
<span class="line">configuration<span class="token punctuation">.</span>searchMode <span class="token operator">=</span> HF_SEARCH_MODE_EXHAUSTIVE<span class="token punctuation">;</span></span>
<span class="line">configuration<span class="token punctuation">.</span>searchThreshold <span class="token operator">=</span> <span class="token number">0.48f</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubDataEnable</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Enable feature hub error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// .....</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// You can manually close it when you don&#39;t need to use it, or ignore it until the program ends</span></span>
<span class="line"><span class="token function">HFFeatureHubDataDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insert-face-embedding" tabindex="-1"><a class="header-anchor" href="#insert-face-embedding"><span>Insert Face Embedding</span></a></h3><p>Insert a face embedding feature vector into FeatureHub. If in HF_PK_AUTO_INCREMENT mode, the input feature.id will be ignored. If in HF_PK_MANUAL_INPUT mode, the input feature.id is the ID the user expects to insert, and the actual inserted face ID is returned through result_id.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Insert face feature into the hub</span></span>
<span class="line">HFFaceFeatureIdentity featureIdentity<span class="token punctuation">;</span></span>
<span class="line">featureIdentity<span class="token punctuation">.</span>feature <span class="token operator">=</span> <span class="token operator">&amp;</span>feature<span class="token punctuation">;</span></span>
<span class="line">featureIdentity<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">HFaceId result_id<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubInsertFeature</span><span class="token punctuation">(</span>featureIdentity<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Insert feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search-most-similar-face" tabindex="-1"><a class="header-anchor" href="#search-most-similar-face"><span>Search Most Similar Face</span></a></h3><p>Input a face embedding to be queried and search for a face ID from FeatureHub that is above the threshold (Cosine similarity).</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Search face feature</span></span>
<span class="line">HFFaceFeatureIdentity query_featureIdentity<span class="token punctuation">;</span></span>
<span class="line">query_featureIdentity<span class="token punctuation">.</span>feature <span class="token operator">=</span> <span class="token operator">&amp;</span>query_feature<span class="token punctuation">;</span></span>
<span class="line">query_featureIdentity<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">HFloat confidence<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubFaceSearch</span><span class="token punctuation">(</span>query_feature<span class="token punctuation">,</span> <span class="token operator">&amp;</span>confidence<span class="token punctuation">,</span> <span class="token operator">&amp;</span>query_featureIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Search feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search-top-k-faces" tabindex="-1"><a class="header-anchor" href="#search-top-k-faces"><span>Search Top-K Faces</span></a></h3><p>Search for the top K faces with the highest similarity. Note that the data obtained by the <code>HFFeatureHubFaceSearchTopK</code> interface is cached data, and you need to retrieve all the result data you need before the next call, otherwise the next call will overwrite the historical data.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Create HFSearchTopKResults to store search results</span></span>
<span class="line">HFSearchTopKResults results<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubFaceSearchTopK</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> topK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;The search for the top k vectors failed: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Get all the results</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  	HFloat score <span class="token operator">=</span> results<span class="token punctuation">.</span>confidence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  	HPFaceId id <span class="token operator">=</span>  results<span class="token punctuation">.</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete-face-embedding" tabindex="-1"><a class="header-anchor" href="#delete-face-embedding"><span>Delete Face Embedding</span></a></h3><p>Specify a face ID to delete that face from FeatureHub.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Remove face feature</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubFaceRemove</span><span class="token punctuation">(</span>result_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Remove feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Remove feature result: %d&quot;</span><span class="token punctuation">,</span> result_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-face-embedding" tabindex="-1"><a class="header-anchor" href="#update-face-embedding"><span>Update Face Embedding</span></a></h3><div class="language-C line-numbers-mode" data-highlighter="prismjs" data-ext="C"><pre><code><span class="line">// Create HFFaceFeatureIdentity</span>
<span class="line">HFFaceFeatureIdentity updateIdentity;</span>
<span class="line">updateIdentity.id = old_id;	</span>
<span class="line">updateIdentity.feature = &amp;feature;	</span>
<span class="line"></span>
<span class="line">// Update feature</span>
<span class="line">ret = HFFeatureHubFaceUpdate(updateIdentity);</span>
<span class="line">if (ret != HSUCCEED) {</span>
<span class="line">    HFLogPrint(HF_LOG_ERROR, &quot;Update feature error: %d&quot;, ret);</span>
<span class="line">    return ret;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-face-embedding-from-id" tabindex="-1"><a class="header-anchor" href="#get-face-embedding-from-id"><span>Get Face Embedding from ID</span></a></h3><p>You can quickly obtain FaceFeatureIdentity related information through a face ID.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Create HFFaceFeatureIdentity</span></span>
<span class="line">HFFaceFeatureIdentity identity<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">HFFeatureHubGetFaceIdentity</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dynamic-search-threshold-adjustment" tabindex="-1"><a class="header-anchor" href="#dynamic-search-threshold-adjustment"><span>Dynamic Search Threshold Adjustment</span></a></h3><p>You can dynamically modify FeatureHub&#39;s search threshold in different scenarios.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token function">HFFeatureHubFaceSearchThresholdSetting</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="other-feature" tabindex="-1"><a class="header-anchor" href="#other-feature"><span>Other Feature</span></a></h2><p>TODO</p><h2 id="example-face-pipeline" tabindex="-1"><a class="header-anchor" href="#example-face-pipeline"><span>[Example] Face Pipeline</span></a></h2><p>Provide a complete example of the program including face detection, landmark location and face attribute recognition:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inspireface.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_IMAGES</span> <span class="token expression"><span class="token number">2</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    HResult ret<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> packPath<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> imgPath1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> imgPath2<span class="token punctuation">;</span></span>
<span class="line">    HOption option<span class="token punctuation">;</span></span>
<span class="line">    HFSession session<span class="token punctuation">;</span></span>
<span class="line">    HFFaceFeature features<span class="token punctuation">[</span>NUM_IMAGES<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> imgPaths<span class="token punctuation">[</span>NUM_IMAGES<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    HFloat similarity<span class="token punctuation">;</span></span>
<span class="line">    HFloat recommended_cosine_threshold<span class="token punctuation">;</span></span>
<span class="line">    HFloat percentage<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Check whether the number of parameters is correct */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s &lt;pack_path&gt; &lt;img1_path&gt; &lt;img2_path&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    packPath <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    imgPath1 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    imgPath2 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Initialize features array to NULL */</span></span>
<span class="line">    <span class="token function">memset</span><span class="token punctuation">(</span>features<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Allocate memory for feature vectors */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_IMAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFCreateFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create face feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Set the image path array */</span></span>
<span class="line">    imgPaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> imgPath1<span class="token punctuation">;</span></span>
<span class="line">    imgPaths<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> imgPath2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Pack file Path: %s&quot;</span><span class="token punctuation">,</span> packPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Source file Path 1: %s&quot;</span><span class="token punctuation">,</span> imgPath1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Source file Path 2: %s&quot;</span><span class="token punctuation">,</span> imgPath2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* The resource file must be loaded before it can be used */</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFLaunchInspireFace</span><span class="token punctuation">(</span>packPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Load Resource error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Create a session for face recognition */</span></span>
<span class="line">    option <span class="token operator">=</span> HF_ENABLE_FACE_RECOGNITION<span class="token punctuation">;</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFCreateInspireFaceSessionOptional</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> HF_DETECT_MODE_ALWAYS_DETECT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Process two images */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_IMAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        HFImageBitmap imageBitmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        HFImageStream stream<span class="token punctuation">;</span></span>
<span class="line">        HFMultipleFaceData multipleFaceData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFCreateImageBitmapFromFilePath</span><span class="token punctuation">(</span>imgPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create image bitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFCreateImageStreamFromImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">,</span> HF_CAMERA_ROTATION_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create stream error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Run face track error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>multipleFaceData<span class="token punctuation">.</span>detectedNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;No face was detected: %s&quot;</span><span class="token punctuation">,</span> imgPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFFaceFeatureExtractTo</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Extract feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    HFFaceFeature feature1 <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    HFFaceFeature feature2 <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Run comparison */</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFFaceComparison</span><span class="token punctuation">(</span>feature1<span class="token punctuation">,</span> feature2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>similarity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Feature comparison error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFGetRecommendedCosineThreshold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recommended_cosine_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get recommended cosine threshold error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>similarity <span class="token operator">&gt;</span> recommended_cosine_threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;%.3f &gt; %.3f ✓ Same face&quot;</span><span class="token punctuation">,</span> similarity<span class="token punctuation">,</span> recommended_cosine_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_WARN<span class="token punctuation">,</span> <span class="token string">&quot;%.3f &lt; %.3f ✗ Different face&quot;</span><span class="token punctuation">,</span> similarity<span class="token punctuation">,</span> recommended_cosine_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Similarity score: %.3f&quot;</span><span class="token punctuation">,</span> similarity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFCosineSimilarityConvertToPercentage</span><span class="token punctuation">(</span>similarity<span class="token punctuation">,</span> <span class="token operator">&amp;</span>percentage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Convert similarity to percentage error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Percentage similarity: %f&quot;</span><span class="token punctuation">,</span> percentage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Clean up resources */</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFReleaseInspireFaceSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">cleanup<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">/* Release the feature vector memory */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_IMAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Only release features that were successfully created</span></span>
<span class="line">            <span class="token function">HFReleaseFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">HFDeBugShowResourceStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="more" tabindex="-1"><a class="header-anchor" href="#more"><span>More</span></a></h2><p>TODO</p>`,58)]))}const l=s(p,[["render",c]]),u=JSON.parse('{"path":"/using-with/c-cpp.html","title":"Using InspireFace in C/C++","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation and Setup","slug":"installation-and-setup","link":"#installation-and-setup","children":[]},{"level":2,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":2,"title":"Face Algorithm Session","slug":"face-algorithm-session","link":"#face-algorithm-session","children":[{"level":3,"title":"Create Session","slug":"create-session","link":"#create-session","children":[]},{"level":3,"title":"Face Detection","slug":"face-detection","link":"#face-detection","children":[]},{"level":3,"title":"Face Embeding","slug":"face-embeding","link":"#face-embeding","children":[]}]},{"level":2,"title":"Face Embedding Database","slug":"face-embedding-database","link":"#face-embedding-database","children":[{"level":3,"title":"Enable/Disable FeatureHub","slug":"enable-disable-featurehub","link":"#enable-disable-featurehub","children":[]},{"level":3,"title":"Insert Face Embedding","slug":"insert-face-embedding","link":"#insert-face-embedding","children":[]},{"level":3,"title":"Search Most Similar Face","slug":"search-most-similar-face","link":"#search-most-similar-face","children":[]},{"level":3,"title":"Search Top-K Faces","slug":"search-top-k-faces","link":"#search-top-k-faces","children":[]},{"level":3,"title":"Delete Face Embedding","slug":"delete-face-embedding","link":"#delete-face-embedding","children":[]},{"level":3,"title":"Update Face Embedding","slug":"update-face-embedding","link":"#update-face-embedding","children":[]},{"level":3,"title":"Get Face Embedding from ID","slug":"get-face-embedding-from-id","link":"#get-face-embedding-from-id","children":[]},{"level":3,"title":"Dynamic Search Threshold Adjustment","slug":"dynamic-search-threshold-adjustment","link":"#dynamic-search-threshold-adjustment","children":[]}]},{"level":2,"title":"Other Feature","slug":"other-feature","link":"#other-feature","children":[]},{"level":2,"title":"[Example] Face Pipeline","slug":"example-face-pipeline","link":"#example-face-pipeline","children":[]},{"level":2,"title":"More","slug":"more","link":"#more","children":[]}],"git":{"updatedTime":1748231027000,"contributors":[{"name":"tunm","username":"tunm","email":"tunmxy@163.com","commits":6,"url":"https://github.com/tunm"}],"changelog":[{"hash":"3586c1b54db6aa4c817cdeae464697f08debca38","time":1748231027000,"email":"tunmxy@163.com","author":"tunm","message":"Add archive diagram"},{"hash":"bf08361cf1899474bc4544c403ac2863a47700b5","time":1744273280000,"email":"tunmxy@163.com","author":"tunm","message":"Update some c and cpp samples"},{"hash":"c512377e2076e7ec1b60344de14cb1fc52fd29a9","time":1744191774000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"00473c2c94170ac17df87e27a68c633b9151a414","time":1744185861000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"36283da830e3e7efee25add2666d4a49dae22fa8","time":1744178190000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"b1bdfb0435ebc29849c32dd85a92e67161a23726","time":1744160796000,"email":"tunmxy@163.com","author":"tunm","message":"Update"}]},"filePathRelative":"using-with/c-cpp.md"}');export{l as comp,u as data};
