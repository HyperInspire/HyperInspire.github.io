import{_ as s,c as a,d as e,o as t}from"./app-DRTWzT0V.js";const p={};function i(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="using-inspireface-in-c-c" tabindex="-1"><a class="header-anchor" href="#using-inspireface-in-c-c"><span>Using InspireFace in C/C++</span></a></h1><p>Whether it is C or C++, we recommend the use of a single CAPI header file + lib, because CAPI long-term maintenance is relatively stable, of course, there are C++ interfaces, specific reference to C++ header files.</p><h2 id="installation-and-setup" tabindex="-1"><a class="header-anchor" href="#installation-and-setup"><span>Installation and Setup</span></a></h2><p>You can download the precompiled inspireface library from the <a href="https://github.com/HyperInspire/InspireFace/releases" target="_blank" rel="noopener noreferrer">release page</a>, which includes the dynamic library +CAPI header by default. You need to link and include them in your project, using cmake as an example:</p><div class="language-cmake line-numbers-mode" data-highlighter="prismjs" data-ext="cmake"><pre><code><span class="line"><span class="token comment"># Prepare your inspireface-sdk directory in advance</span></span>
<span class="line"><span class="token keyword">set</span><span class="token punctuation">(</span>INSPIREFACE_DIR your_dir/InspireFace<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>INSPIREFACE_DIR<span class="token punctuation">}</span>/include<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>INSPIREFACE_DIR<span class="token punctuation">}</span>/lib<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Link to your project</span></span>
<span class="line"><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>YourProject InspireFace<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h2><p>Global initialization of InspireFace is necessary. You only need to perform it once when the program starts. The initialization includes functions such as configuration reading and model loading.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Import header file</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inspireface.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Initialization at the beginning of the program</span></span>
<span class="line">std<span class="token operator">::</span>string resourcePath <span class="token operator">=</span> <span class="token string">&quot;test_res/pack/Pikachu&quot;</span><span class="token punctuation">;</span></span>
<span class="line">HResult ret <span class="token operator">=</span> <span class="token function">HFReloadInspireFace</span><span class="token punctuation">(</span>resourcePath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Failed to launch InspireFace: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When you don&#39;t need it (you can ignore it)</span></span>
<span class="line"><span class="token function">HFTerminateInspireFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="face-algorithm-session" tabindex="-1"><a class="header-anchor" href="#face-algorithm-session"><span>Face Algorithm Session</span></a></h2><p>InspireFace&#39;s facial analysis algorithms are all concentrated in the session. You can use the session instance to perform <strong>face recognition</strong>, <strong>face embedding extraction</strong>, <strong>face detection</strong>, <strong>face tracking</strong>, <strong>landmark localization</strong>, <strong>liveness detection</strong>, <strong>head pose estimation</strong>, <strong>attribute recognition</strong>, and other functions.</p><p>Since the session contains some cache, <strong>we recommend</strong> using one session within a thread, and <strong>we don&#39;t recommend</strong> cross-using internal data from multiple sessions in tracking mode, as this can easily cause confusion. Sessions can be freely created and destroyed anywhere.</p><img src="https://inspireface-1259028827.cos.ap-singapore.myqcloud.com/docs/pipeline.png"><h3 id="create-session" tabindex="-1"><a class="header-anchor" href="#create-session"><span>Create Session</span></a></h3><p>When creating a session, there are some important parameters that need to be specified:</p><ul><li><strong>Option</strong>: Features that need to be turned on, such as face recognition, mask detection, face attributes. This step will increase the memory used by the session</li><li><strong>Detect Mode</strong>: <ul><li><strong>Always Detection</strong>: Face detection is performed each time, usually for image input or scenes where faces do not need to be tracked</li><li><strong>Light Tracking</strong>: Lightweight face tracking algorithm, support input frame sequence tracking face, tracking speed is extremely fast</li><li><strong>Tracking by Detection</strong>: With detector-dependent tracking, detection is performed every frame, with low speed and high precision</li></ul></li><li><strong>Max Faces</strong>: Limit the maximum number of faces to detect, if the number of faces is too large, the algorithm will be slow</li><li><strong>Detect Pixel Level</strong>: Face detector level, the higher the more accurate, but also affect the execution speed, usually 160, 192, 256, 320, 640</li></ul><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When creating a session, it will use device memory, and as more options are enabled, the memory usage increases. Appropriately disabling some unnecessary features can save memory.</p></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Enable the functions: face recognition, mask detection, live detection, and face quality</span></span>
<span class="line"><span class="token comment">// detection</span></span>
<span class="line">HOption option <span class="token operator">=</span> HF_ENABLE_FACE_RECOGNITION <span class="token operator">|</span> HF_ENABLE_QUALITY <span class="token operator">|</span> HF_ENABLE_MASK_DETECT <span class="token operator">|</span> HF_ENABLE_LIVENESS <span class="token operator">|</span> HF_ENABLE_DETECT_MODE_LANDMARK<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Non-video or frame sequence mode uses IMAGE-MODE, which is always face detection without</span></span>
<span class="line"><span class="token comment">// tracking</span></span>
<span class="line">HFDetectMode detMode <span class="token operator">=</span> HF_DETECT_MODE_ALWAYS_DETECT<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Maximum number of faces detected</span></span>
<span class="line">HInt32 maxDetectNum <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Face detection image input level</span></span>
<span class="line">HInt32 detectPixelLevel <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Handle of the current face SDK algorithm context</span></span>
<span class="line">HFSession session <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateInspireFaceSessionOptional</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> detMode<span class="token punctuation">,</span> maxDetectNum<span class="token punctuation">,</span> detectPixelLevel<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create FaceContext error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️Note: When you do not need to use the session, it is <strong>important</strong> to destroy it, otherwise it will cause memory leaks:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// The memory must be freed at the end of the program</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseInspireFaceSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-detection" tabindex="-1"><a class="header-anchor" href="#face-detection"><span>Face Detection</span></a></h3><p>Face detection is the first step in the analysis of faces, which requires the input of an image or frame:</p><p><img src="https://inspireface-1259028827.cos.ap-singapore.myqcloud.com/docs/feature/lmk.jpg" alt="landmark"></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Load a image</span></span>
<span class="line">HFImageBitmap image<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateImageBitmapFromFilePath</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;The source entered is not a picture or read error.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Prepare an image parameter structure for configuration</span></span>
<span class="line">HFImageStream imageHandle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateImageStreamFromImageBitmap</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> HF_CAMERA_ROTATION_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>imageHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create ImageStream error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Execute HF_FaceContextRunFaceTrack captures face information in an image</span></span>
<span class="line">HFMultipleFaceData multipleFaceData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> imageHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Execute HFExecuteFaceTrack error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Print the number of faces detected</span></span>
<span class="line"><span class="token keyword">auto</span> faceNum <span class="token operator">=</span> multipleFaceData<span class="token punctuation">.</span>detectedNum<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Num of face: %d&quot;</span><span class="token punctuation">,</span> faceNum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Copy a new image to draw</span></span>
<span class="line">HFImageBitmap drawImage <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFImageBitmapCopy</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token operator">&amp;</span>drawImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Copy ImageBitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">HFImageBitmapData data<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFImageBitmapGetData</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get ImageBitmap data error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> faceNum<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFImageBitmapDrawRect</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>rects<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Print FaceID, In IMAGE-MODE it is changing, in VIDEO-MODE it is fixed, but it may be lost</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;FaceID: %d&quot;</span><span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>trackIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Print Head euler angle, It can often be used to judge the quality of a face by the Angle</span></span>
<span class="line">    <span class="token comment">// of the head</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Roll: %f, Yaw: %f, Pitch: %f&quot;</span><span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>roll<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>yaw<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>pitch<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">HFImageBitmapWriteToFile</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">,</span> <span class="token string">&quot;draw_detected.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_WARN<span class="token punctuation">,</span> <span class="token string">&quot;Write to file success: %s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;draw_detected.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>imageHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release image stream error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// The memory must be freed at the end of the program</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseInspireFaceSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release image bitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>drawImage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release draw image bitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-landmark" tabindex="-1"><a class="header-anchor" href="#face-landmark"><span>Face Landmark</span></a></h3><p>Face landmark prediction can be used in any detection mode state, but it should be noted that if the detection mode is in <strong>TRACK</strong> state, you will get smoother facial landmark points. This is because the internal face tracking state landmark optimization filtering has been integrated. We provide two solutions: 5 basic key points and denser key points (more than 100 points).</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Set landmark smoothing ratio (only effective in TRACK mode!)</span></span>
<span class="line"><span class="token function">HFSessionSetTrackModeSmoothRatio</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Set landmark cache frame count (only effective in TRACK mode!)</span></span>
<span class="line"><span class="token function">HFSessionSetTrackModeNumSmoothCacheFrame</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">HInt32 ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> imageHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Execute HFExecuteFaceTrack error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Get the number of detected faces</span></span>
<span class="line">HInt32 faceNum <span class="token operator">=</span> multipleFaceData<span class="token punctuation">.</span>detectedNum<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> faceNum<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    HPoint2f<span class="token operator">*</span> denseLandmarkPoints<span class="token punctuation">;</span></span>
<span class="line">    HPoint2f fiveKeyPoints<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Get five basic key points</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFGetFaceFiveKeyPointsFromFaceToken</span><span class="token punctuation">(</span>multipleFaceData<span class="token punctuation">.</span>tokens<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> fiveKeyPoints<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;HFGetFaceFiveKeyPointsFromFaceToken error!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Get the number of dense landmark points */</span></span>
<span class="line">    <span class="token function">HFGetNumOfFaceDenseLandmark</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>numOfLmk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    denseLandmarkPoints <span class="token operator">=</span> <span class="token punctuation">(</span>HPoint2f<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HPoint2f<span class="token punctuation">)</span> <span class="token operator">*</span> numOfLmk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>denseLandmarkPoints <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Memory allocation failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFGetFaceDenseLandmarkFromFaceToken</span><span class="token punctuation">(</span>multipleFaceData<span class="token punctuation">.</span>tokens<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> denseLandmarkPoints<span class="token punctuation">,</span> numOfLmk<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">free</span><span class="token punctuation">(</span>denseLandmarkPoints<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;HFGetFaceDenseLandmarkFromFaceToken error!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://inspireface-1259028827.cos.ap-singapore.myqcloud.com/docs/out-8.gif" width="200" height="200"><h3 id="face-embeding" tabindex="-1"><a class="header-anchor" href="#face-embeding"><span>Face Embeding</span></a></h3><p>Get face Embeding is an important step in face recognition, comparison or face swap, which usually needs to be carried out after face detection or tracking.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Execute face tracking on the image</span></span>
<span class="line">HFMultipleFaceData multipleFaceData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Track faces in the image</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Run face track error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>multipleFaceData<span class="token punctuation">.</span>detectedNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Check if any faces were detected</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;No face was detected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Extract facial features from the first detected face, an interface that uses copy features in a comparison scenario</span></span>
<span class="line">HFFaceFeature feature<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFCreateFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create face feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Not in use need to release</span></span>
<span class="line"><span class="token function">HFReleaseFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-pose-estimation" tabindex="-1"><a class="header-anchor" href="#face-pose-estimation"><span>Face Pose Estimation</span></a></h3><p>When you create a session with the <strong>HF_ENABLE_FACE_POSE</strong> option enabled, you can obtain face pose Euler angle values from the returned MultipleFaceData during face detection or tracking:</p><ul><li><strong>HFFaceEulerAngle</strong>: <ul><li><strong>roll</strong>: Head rotation around the Z-axis (tilting left/right)</li><li><strong>yaw</strong>: Head rotation around the Y-axis (turning left/right)</li><li><strong>pitch</strong>: Head rotation around the X-axis (nodding up/down)</li></ul></li></ul><img src="https://inspireface-1259028827.cos.ap-singapore.myqcloud.com/docs/feature/pose.jpg" alt="pose" style="max-width:250px;"><p>If you don&#39;t enable the <strong>HF_ENABLE_FACE_POSE</strong> option, you will get invalid values.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> multipleFaceData<span class="token punctuation">.</span>detectedNum<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    HFloat roll <span class="token operator">=</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>roll<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    HFloat yaw <span class="token operator">=</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>yaw<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    HFloat pitch <span class="token operator">=</span> multipleFaceData<span class="token punctuation">.</span>angles<span class="token punctuation">.</span>pitch<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;face_index: %d, roll: %f, yaw: %f, pitch: %f&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> roll<span class="token punctuation">,</span> yaw<span class="token punctuation">,</span> pitch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="face-pipeline" tabindex="-1"><a class="header-anchor" href="#face-pipeline"><span>Face Pipeline</span></a></h2><p>If you want to access facial attribute functions such as Anti-Spoofing, mask detection, quality detection, and facial motion recognition, you need to call the Pipeline interface to execute these functions.</p><img src="https://inspireface-1259028827.cos.ap-singapore.myqcloud.com/docs/pip_bn.png" alt="quality" style="max-height:200px;"><h3 id="execute-the-face-pipeline" tabindex="-1"><a class="header-anchor" href="#execute-the-face-pipeline"><span>Execute the Face Pipeline</span></a></h3><p>To execute the Pipeline function, you need to first perform face detection or tracking to obtain MultipleFaceData, select the face you want to execute the pipeline on as input parameters, and configure the corresponding Option for the functions you want to call.</p><p>All functions require only one pipeline interface call, which simplifies frequent calling scenarios.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Ensure that the Option is included when creating the Session. The executed Option must be a subset of or identical to the Session&#39;s Option. If the execution exceeds the configured Session Option functionality scope, it will fail to execute!</p></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">/* Run pipeline function */</span></span>
<span class="line"><span class="token comment">/* Select the pipeline function that you want to execute, provided that it is already enabled</span>
<span class="line">    * when the session is created! */</span></span>
<span class="line">pipelineOption <span class="token operator">=</span> HF_ENABLE_QUALITY <span class="token operator">|</span> HF_ENABLE_MASK_DETECT <span class="token operator">|</span> HF_ENABLE_LIVENESS <span class="token operator">|</span> HF_ENABLE_FACE_EMOTION <span class="token operator">|</span> HF_ENABLE_INTERACTION<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* In this pipeline, all faces are processed */</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFMultipleFacePipelineProcessOptional</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> imageHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">,</span> pipelineOption<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Execute Pipeline error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-rgb-anti-spoofing" tabindex="-1"><a class="header-anchor" href="#face-rgb-anti-spoofing"><span>Face RGB Anti-Spoofing</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_LIVENESS</strong>, you can obtain the RGB Anti-Spoofing detection confidence through the following method:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">HFRGBLivenessConfidence livenessConfidence<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* Get RGB liveness detection results from the pipeline cache */</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetRGBLivenessConfidence</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>livenessConfidence<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get RGB liveness result error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://inspireface-1259028827.cos.ap-singapore.myqcloud.com/docs/feature/liveness.jpg" alt="liveness" style="max-width:220px;"><h3 id="face-mask-detection" tabindex="-1"><a class="header-anchor" href="#face-mask-detection"><span>Face Mask Detection</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_MASK_DETECT</strong>, you can obtain the face mask detection confidence through the following method:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">HFFaceMaskConfidence maskConfidence<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* Get mask detection results from the pipeline cache */</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetFaceMaskConfidence</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>maskConfidence<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get mask detection result error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-quality-prediction" tabindex="-1"><a class="header-anchor" href="#face-quality-prediction"><span>Face Quality Prediction</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_QUALITY</strong>, you can obtain face quality through the following method. This is a comprehensive confidence score based on attributes that affect clarity such as blur, occlusion, and lighting:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">HFFaceQualityConfidence qualityConfidence<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* Get face quality results from the pipeline cache */</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetFaceQualityConfidence</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>qualityConfidence<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get face quality result error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eyes-state-prediction" tabindex="-1"><a class="header-anchor" href="#eyes-state-prediction"><span>Eyes State Prediction</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_INTERACTION</strong>, you can obtain the static action state of the current frame through the following method (currently only supports eye state):</p><ul><li><strong>leftEyeStatusConfidence</strong>: Left eye state: confidence close to 1 means open, close to 0 means closed.</li><li><strong>rightEyeStatusConfidence</strong>: Right eye state: confidence close to 1 means open, close to 0 means closed.</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">/* Get the facial interaction status */</span></span>
<span class="line">HFFaceInteractionState result<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetFaceInteractionStateResult</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get face interaction state result error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-interactions-action-detection" tabindex="-1"><a class="header-anchor" href="#face-interactions-action-detection"><span>Face Interactions Action Detection</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_INTERACTION</strong> and are in <strong>TRACK</strong> mode, you can obtain a series of facial actions calculated through consecutive sequence frames through the following method. These are typically used for interactive scenarios such as combining with liveness detection:</p><ul><li><strong>normal</strong>: Normal state, no special actions</li><li><strong>shake</strong>: Head shaking action, moving head left and right</li><li><strong>jawOpen</strong>: Mouth opening action, opening the mouth</li><li><strong>headRaise</strong>: Head raising action, lifting the head upward</li><li><strong>blink</strong>: Blinking action, closing and opening the eyes</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Get the interaction results of consecutive frame actions</span></span>
<span class="line">HFFaceInteractionsActions result<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetFaceInteractionActionsResult</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get the interaction results of consecutive frame actions error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Print the detected various action states</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Face interactions - Normal: %d, Shake: %d, Jaw Open: %d, Head Raise: %d, Blink: %d&quot;</span><span class="token punctuation">,</span></span>
<span class="line">           result<span class="token punctuation">.</span>normal<span class="token punctuation">,</span> result<span class="token punctuation">.</span>shake<span class="token punctuation">,</span> result<span class="token punctuation">.</span>jawOpen<span class="token punctuation">,</span> result<span class="token punctuation">.</span>headRaise<span class="token punctuation">,</span> result<span class="token punctuation">.</span>blink<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-emotion-prediction" tabindex="-1"><a class="header-anchor" href="#face-emotion-prediction"><span>Face Emotion Prediction</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_FACE_EMOTION</strong>, you can obtain facial expression recognition results through the API:</p><ul><li><strong>emotion</strong>: Detected facial emotion type, returns corresponding integer values: <ul><li>0: Neutral</li><li>1: Happy</li><li>2: Sad</li><li>3: Surprise</li><li>4: Fear</li><li>5: Disgust</li><li>6: Anger</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">HFFaceEmotionResult faceEmotionResult<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetFaceEmotionResult</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>faceEmotionResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get face emotion result error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Print the number of detected faces and emotion results</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Number of faces: %d&quot;</span><span class="token punctuation">,</span> faceEmotionResult<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> faceEmotionResult<span class="token punctuation">.</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Face %d emotion: %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> faceEmotionResult<span class="token punctuation">.</span>emotion<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="face-attribute-prediction" tabindex="-1"><a class="header-anchor" href="#face-attribute-prediction"><span>Face Attribute Prediction</span></a></h3><p>When you configure and execute a Pipeline with the Option containing <strong>HF_ENABLE_FACE_ATTRIBUTE</strong>, you can obtain facial attribute recognition results through the API, including race, gender, and age bracket:</p><ul><li><p><strong>race</strong>: Detected facial race type, returns corresponding integer values:</p><ul><li>0: Black</li><li>1: Asian</li><li>2: Latino/Hispanic</li><li>3: Middle Eastern</li><li>4: White</li></ul></li><li><p><strong>gender</strong>: Detected facial gender, returns corresponding integer values:</p><ul><li>0: Female</li><li>1: Male</li></ul></li><li><p><strong>ageBracket</strong>: Detected facial age bracket, returns corresponding integer values:</p><ul><li>0: 0-2 years old</li><li>1: 3-9 years old</li><li>2: 10-19 years old</li><li>3: 20-29 years old</li><li>4: 30-39 years old</li><li>5: 40-49 years old</li><li>6: 50-59 years old</li><li>7: 60-69 years old</li><li>8: More than 70 years old</li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line">HFFaceAttributeResult attributeResult<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFGetFaceAttributeResult</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attributeResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get face attribute result error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Print the number of detected faces and attribute results</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Number of faces: %d&quot;</span><span class="token punctuation">,</span> attributeResult<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributeResult<span class="token punctuation">.</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Face %d - Race: %d, Gender: %d, Age Bracket: %d&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">               i<span class="token punctuation">,</span> attributeResult<span class="token punctuation">.</span>race<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> attributeResult<span class="token punctuation">.</span>gender<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> attributeResult<span class="token punctuation">.</span>ageBracket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-face-pipeline" tabindex="-1"><a class="header-anchor" href="#example-face-pipeline"><span>[Example] Face Pipeline</span></a></h3><p>Provide a complete example of the program including face detection, landmark location and face attribute recognition:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inspireface.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_IMAGES</span> <span class="token expression"><span class="token number">2</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    HResult ret<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> packPath<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> imgPath1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> imgPath2<span class="token punctuation">;</span></span>
<span class="line">    HOption option<span class="token punctuation">;</span></span>
<span class="line">    HFSession session<span class="token punctuation">;</span></span>
<span class="line">    HFFaceFeature features<span class="token punctuation">[</span>NUM_IMAGES<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> imgPaths<span class="token punctuation">[</span>NUM_IMAGES<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    HFloat similarity<span class="token punctuation">;</span></span>
<span class="line">    HFloat recommended_cosine_threshold<span class="token punctuation">;</span></span>
<span class="line">    HFloat percentage<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Check whether the number of parameters is correct */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s &lt;pack_path&gt; &lt;img1_path&gt; &lt;img2_path&gt;&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    packPath <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    imgPath1 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    imgPath2 <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Initialize features array to NULL */</span></span>
<span class="line">    <span class="token function">memset</span><span class="token punctuation">(</span>features<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Allocate memory for feature vectors */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_IMAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFCreateFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create face feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Set the image path array */</span></span>
<span class="line">    imgPaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> imgPath1<span class="token punctuation">;</span></span>
<span class="line">    imgPaths<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> imgPath2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Pack file Path: %s&quot;</span><span class="token punctuation">,</span> packPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Source file Path 1: %s&quot;</span><span class="token punctuation">,</span> imgPath1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Source file Path 2: %s&quot;</span><span class="token punctuation">,</span> imgPath2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* The resource file must be loaded before it can be used */</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFLaunchInspireFace</span><span class="token punctuation">(</span>packPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Load Resource error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Create a session for face recognition */</span></span>
<span class="line">    option <span class="token operator">=</span> HF_ENABLE_FACE_RECOGNITION<span class="token punctuation">;</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFCreateInspireFaceSessionOptional</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> HF_DETECT_MODE_ALWAYS_DETECT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Process two images */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_IMAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        HFImageBitmap imageBitmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        HFImageStream stream<span class="token punctuation">;</span></span>
<span class="line">        HFMultipleFaceData multipleFaceData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFCreateImageBitmapFromFilePath</span><span class="token punctuation">(</span>imgPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create image bitmap error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFCreateImageStreamFromImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">,</span> HF_CAMERA_ROTATION_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Create stream error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFExecuteFaceTrack</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>multipleFaceData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Run face track error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>multipleFaceData<span class="token punctuation">.</span>detectedNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;No face was detected: %s&quot;</span><span class="token punctuation">,</span> imgPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ret <span class="token operator">=</span> <span class="token function">HFFaceFeatureExtractTo</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> multipleFaceData<span class="token punctuation">.</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Extract feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">HFReleaseImageStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">HFReleaseImageBitmap</span><span class="token punctuation">(</span>imageBitmap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    HFFaceFeature feature1 <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    HFFaceFeature feature2 <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Run comparison */</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFFaceComparison</span><span class="token punctuation">(</span>feature1<span class="token punctuation">,</span> feature2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>similarity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Feature comparison error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFGetRecommendedCosineThreshold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>recommended_cosine_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Get recommended cosine threshold error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>similarity <span class="token operator">&gt;</span> recommended_cosine_threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;%.3f &gt; %.3f ✓ Same face&quot;</span><span class="token punctuation">,</span> similarity<span class="token punctuation">,</span> recommended_cosine_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_WARN<span class="token punctuation">,</span> <span class="token string">&quot;%.3f &lt; %.3f ✗ Different face&quot;</span><span class="token punctuation">,</span> similarity<span class="token punctuation">,</span> recommended_cosine_threshold<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Similarity score: %.3f&quot;</span><span class="token punctuation">,</span> similarity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFCosineSimilarityConvertToPercentage</span><span class="token punctuation">(</span>similarity<span class="token punctuation">,</span> <span class="token operator">&amp;</span>percentage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Convert similarity to percentage error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Percentage similarity: %f&quot;</span><span class="token punctuation">,</span> percentage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Clean up resources */</span></span>
<span class="line">    ret <span class="token operator">=</span> <span class="token function">HFReleaseInspireFaceSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Release session error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">cleanup<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">/* Release the feature vector memory */</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_IMAGES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Only release features that were successfully created</span></span>
<span class="line">            <span class="token function">HFReleaseFaceFeature</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">HFDeBugShowResourceStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="face-embedding-database" tabindex="-1"><a class="header-anchor" href="#face-embedding-database"><span>Face Embedding Database</span></a></h2><p>We provide a lightweight face embedding vector database (<strong>FeatureHub</strong>) storage solution that includes basic functions such as adding, deleting, modifying, and searching, while supporting both <strong>memory</strong> and <strong>persistent</strong> storage modes.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Although we provide a lightweight vector storage and retrieval function, it is not necessary. If it cannot meet your performance requirements, we encourage you to manage the face embeddings yourself.</p></div><p>Before starting FeatureHub, you need to be familiar with the following parameters:</p><ul><li><strong>primaryKeyMode</strong>: Primary key mode, with two modes available. It&#39;s recommended to use HF_PK_AUTO_INCREMENT by default <ul><li>HF_PK_AUTO_INCREMENT: Auto-increment mode for primary keys</li><li>HF_PK_MANUAL_INPUT: Manual input mode for primary keys, requiring users to avoid duplicate primary keys themselves</li></ul></li><li><strong>enablePersistence</strong>: Whether to enable persistent database storage mode <ul><li>If true: The database will write to local files for persistent storage during usage</li><li>If false: High-speed memory management mode, dependent on program lifecycle</li></ul></li><li><strong>persistenceDbPath</strong>: Storage path required only for persistent mode, defined by the user. If the input is a folder rather than a file, the system default file naming will be used</li><li><strong>searchThreshold</strong>: Face search threshold, using floating-point numbers. During search, only embeddings above the threshold are searched. Different models and scenarios require manual threshold settings</li><li><strong>searchMode</strong>: Search mode, <strong>effective only when searching for top-1 face</strong>, with EAGER and EXHAUSTIVE modes (<strong>this feature is temporarily disabled in the current version</strong>) <ul><li>HF_SEARCH_MODE_EAGER: Complete search immediately upon encountering the first face above the threshold</li><li>HF_SEARCH_MODE_EXHAUSTIVE: Search all similar faces and return the one with the highest similarity</li></ul></li></ul><h3 id="enable-disable-featurehub" tabindex="-1"><a class="header-anchor" href="#enable-disable-featurehub"><span>Enable/Disable FeatureHub</span></a></h3><p>Using thread-safe singleton pattern design, it has global scope and only needs to be opened once:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// When you need to enable global storage</span></span>
<span class="line">HFFeatureHubConfiguration configuration<span class="token punctuation">;</span></span>
<span class="line">configuration<span class="token punctuation">.</span>primaryKeyMode <span class="token operator">=</span> HF_PK_AUTO_INCREMENT<span class="token punctuation">;</span>	<span class="token comment">// Recommended to use auto increment</span></span>
<span class="line">configuration<span class="token punctuation">.</span>enablePersistence <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">// If the memory mode is set to 0</span></span>
<span class="line">configuration<span class="token punctuation">.</span>persistenceDbPath <span class="token operator">=</span> db_path<span class="token punctuation">;</span></span>
<span class="line">configuration<span class="token punctuation">.</span>searchMode <span class="token operator">=</span> HF_SEARCH_MODE_EXHAUSTIVE<span class="token punctuation">;</span></span>
<span class="line">configuration<span class="token punctuation">.</span>searchThreshold <span class="token operator">=</span> <span class="token number">0.48f</span><span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubDataEnable</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Enable feature hub error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// .....</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// You can manually close it when you don&#39;t need to use it, or ignore it until the program ends</span></span>
<span class="line"><span class="token function">HFFeatureHubDataDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insert-face-embedding" tabindex="-1"><a class="header-anchor" href="#insert-face-embedding"><span>Insert Face Embedding</span></a></h3><p>Insert a face embedding feature vector into FeatureHub. If in HF_PK_AUTO_INCREMENT mode, the input feature.id will be ignored. If in HF_PK_MANUAL_INPUT mode, the input feature.id is the ID the user expects to insert, and the actual inserted face ID is returned through result_id.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Insert face feature into the hub</span></span>
<span class="line">HFFaceFeatureIdentity featureIdentity<span class="token punctuation">;</span></span>
<span class="line">featureIdentity<span class="token punctuation">.</span>feature <span class="token operator">=</span> <span class="token operator">&amp;</span>feature<span class="token punctuation">;</span></span>
<span class="line">featureIdentity<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">HFaceId result_id<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubInsertFeature</span><span class="token punctuation">(</span>featureIdentity<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Insert feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search-most-similar-face" tabindex="-1"><a class="header-anchor" href="#search-most-similar-face"><span>Search Most Similar Face</span></a></h3><p>Input a face embedding to be queried and search for a face ID from FeatureHub that is above the threshold (Cosine similarity).</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Search face feature</span></span>
<span class="line">HFFaceFeatureIdentity query_featureIdentity<span class="token punctuation">;</span></span>
<span class="line">query_featureIdentity<span class="token punctuation">.</span>feature <span class="token operator">=</span> <span class="token operator">&amp;</span>query_feature<span class="token punctuation">;</span></span>
<span class="line">query_featureIdentity<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">HFloat confidence<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubFaceSearch</span><span class="token punctuation">(</span>query_feature<span class="token punctuation">,</span> <span class="token operator">&amp;</span>confidence<span class="token punctuation">,</span> <span class="token operator">&amp;</span>query_featureIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Search feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search-top-k-faces" tabindex="-1"><a class="header-anchor" href="#search-top-k-faces"><span>Search Top-K Faces</span></a></h3><p>Search for the top K faces with the highest similarity. Note that the data obtained by the <code>HFFeatureHubFaceSearchTopK</code> interface is cached data, and you need to retrieve all the result data you need before the next call, otherwise the next call will overwrite the historical data.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Create HFSearchTopKResults to store search results</span></span>
<span class="line">HFSearchTopKResults results<span class="token punctuation">;</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubFaceSearchTopK</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> topK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;The search for the top k vectors failed: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Get all the results</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  	HFloat score <span class="token operator">=</span> results<span class="token punctuation">.</span>confidence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  	HPFaceId id <span class="token operator">=</span>  results<span class="token punctuation">.</span>ids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete-face-embedding" tabindex="-1"><a class="header-anchor" href="#delete-face-embedding"><span>Delete Face Embedding</span></a></h3><p>Specify a face ID to delete that face from FeatureHub.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Remove face feature</span></span>
<span class="line">ret <span class="token operator">=</span> <span class="token function">HFFeatureHubFaceRemove</span><span class="token punctuation">(</span>result_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_ERROR<span class="token punctuation">,</span> <span class="token string">&quot;Remove feature error: %d&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> ret<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">HFLogPrint</span><span class="token punctuation">(</span>HF_LOG_INFO<span class="token punctuation">,</span> <span class="token string">&quot;Remove feature result: %d&quot;</span><span class="token punctuation">,</span> result_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-face-embedding" tabindex="-1"><a class="header-anchor" href="#update-face-embedding"><span>Update Face Embedding</span></a></h3><p>You can replace the existing feature vectors in the database through the update interface.</p><div class="language-C line-numbers-mode" data-highlighter="prismjs" data-ext="C"><pre><code><span class="line">// Create HFFaceFeatureIdentity</span>
<span class="line">HFFaceFeatureIdentity updateIdentity;</span>
<span class="line">updateIdentity.id = old_id;	</span>
<span class="line">updateIdentity.feature = &amp;feature;	</span>
<span class="line"></span>
<span class="line">// Update feature</span>
<span class="line">ret = HFFeatureHubFaceUpdate(updateIdentity);</span>
<span class="line">if (ret != HSUCCEED) {</span>
<span class="line">    HFLogPrint(HF_LOG_ERROR, &quot;Update feature error: %d&quot;, ret);</span>
<span class="line">    return ret;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-face-embedding-from-id" tabindex="-1"><a class="header-anchor" href="#get-face-embedding-from-id"><span>Get Face Embedding from ID</span></a></h3><p>You can quickly obtain FaceFeatureIdentity related information through a face ID.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token comment">// Create HFFaceFeatureIdentity</span></span>
<span class="line">HFFaceFeatureIdentity identity<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">HFFeatureHubGetFaceIdentity</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> HSUCCEED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> nullptr<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dynamic-search-threshold-adjustment" tabindex="-1"><a class="header-anchor" href="#dynamic-search-threshold-adjustment"><span>Dynamic Search Threshold Adjustment</span></a></h3><p>You can dynamically modify FeatureHub&#39;s search threshold in different scenarios.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token function">HFFeatureHubFaceSearchThresholdSetting</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,102)]))}const l=s(p,[["render",i]]),u=JSON.parse('{"path":"/using-with/c-cpp.html","title":"Using InspireFace in C/C++","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation and Setup","slug":"installation-and-setup","link":"#installation-and-setup","children":[]},{"level":2,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":2,"title":"Face Algorithm Session","slug":"face-algorithm-session","link":"#face-algorithm-session","children":[{"level":3,"title":"Create Session","slug":"create-session","link":"#create-session","children":[]},{"level":3,"title":"Face Detection","slug":"face-detection","link":"#face-detection","children":[]},{"level":3,"title":"Face Landmark","slug":"face-landmark","link":"#face-landmark","children":[]},{"level":3,"title":"Face Embeding","slug":"face-embeding","link":"#face-embeding","children":[]},{"level":3,"title":"Face Pose Estimation","slug":"face-pose-estimation","link":"#face-pose-estimation","children":[]}]},{"level":2,"title":"Face Pipeline","slug":"face-pipeline","link":"#face-pipeline","children":[{"level":3,"title":"Execute the Face Pipeline","slug":"execute-the-face-pipeline","link":"#execute-the-face-pipeline","children":[]},{"level":3,"title":"Face RGB Anti-Spoofing","slug":"face-rgb-anti-spoofing","link":"#face-rgb-anti-spoofing","children":[]},{"level":3,"title":"Face Mask Detection","slug":"face-mask-detection","link":"#face-mask-detection","children":[]},{"level":3,"title":"Face Quality Prediction","slug":"face-quality-prediction","link":"#face-quality-prediction","children":[]},{"level":3,"title":"Eyes State Prediction","slug":"eyes-state-prediction","link":"#eyes-state-prediction","children":[]},{"level":3,"title":"Face Interactions Action Detection","slug":"face-interactions-action-detection","link":"#face-interactions-action-detection","children":[]},{"level":3,"title":"Face Emotion Prediction","slug":"face-emotion-prediction","link":"#face-emotion-prediction","children":[]},{"level":3,"title":"Face Attribute Prediction","slug":"face-attribute-prediction","link":"#face-attribute-prediction","children":[]},{"level":3,"title":"[Example] Face Pipeline","slug":"example-face-pipeline","link":"#example-face-pipeline","children":[]}]},{"level":2,"title":"Face Embedding Database","slug":"face-embedding-database","link":"#face-embedding-database","children":[{"level":3,"title":"Enable/Disable FeatureHub","slug":"enable-disable-featurehub","link":"#enable-disable-featurehub","children":[]},{"level":3,"title":"Insert Face Embedding","slug":"insert-face-embedding","link":"#insert-face-embedding","children":[]},{"level":3,"title":"Search Most Similar Face","slug":"search-most-similar-face","link":"#search-most-similar-face","children":[]},{"level":3,"title":"Search Top-K Faces","slug":"search-top-k-faces","link":"#search-top-k-faces","children":[]},{"level":3,"title":"Delete Face Embedding","slug":"delete-face-embedding","link":"#delete-face-embedding","children":[]},{"level":3,"title":"Update Face Embedding","slug":"update-face-embedding","link":"#update-face-embedding","children":[]},{"level":3,"title":"Get Face Embedding from ID","slug":"get-face-embedding-from-id","link":"#get-face-embedding-from-id","children":[]},{"level":3,"title":"Dynamic Search Threshold Adjustment","slug":"dynamic-search-threshold-adjustment","link":"#dynamic-search-threshold-adjustment","children":[]}]}],"git":{"updatedTime":1750910852000,"contributors":[{"name":"tunm","username":"tunm","email":"tunmxy@163.com","commits":9,"url":"https://github.com/tunm"}],"changelog":[{"hash":"6620d40c5e2c52ece253aa8aa08b9f61c1a69d66","time":1750910852000,"email":"tunmxy@163.com","author":"tunm","message":"1"},{"hash":"4de91862ee6a8e32bc71a2016b95b661a4e1ac97","time":1750128845000,"email":"tunmxy@163.com","author":"tunm","message":"add doc"},{"hash":"57d37f83b8b4f3896156d0bd740bd3adc4fa7543","time":1750069175000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"3586c1b54db6aa4c817cdeae464697f08debca38","time":1748231027000,"email":"tunmxy@163.com","author":"tunm","message":"Add archive diagram"},{"hash":"bf08361cf1899474bc4544c403ac2863a47700b5","time":1744273280000,"email":"tunmxy@163.com","author":"tunm","message":"Update some c and cpp samples"},{"hash":"c512377e2076e7ec1b60344de14cb1fc52fd29a9","time":1744191774000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"00473c2c94170ac17df87e27a68c633b9151a414","time":1744185861000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"36283da830e3e7efee25add2666d4a49dae22fa8","time":1744178190000,"email":"tunmxy@163.com","author":"tunm","message":"Update"},{"hash":"b1bdfb0435ebc29849c32dd85a92e67161a23726","time":1744160796000,"email":"tunmxy@163.com","author":"tunm","message":"Update"}]},"filePathRelative":"using-with/c-cpp.md"}');export{l as comp,u as data};
